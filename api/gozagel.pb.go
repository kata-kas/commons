// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: api/gozagel.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountryCode int32

const (
	CountryCode_null CountryCode = 0
	CountryCode_AD   CountryCode = 1
	CountryCode_AE   CountryCode = 2
	CountryCode_AF   CountryCode = 3
	CountryCode_AG   CountryCode = 4
	CountryCode_AI   CountryCode = 5
	CountryCode_AL   CountryCode = 6
	CountryCode_AM   CountryCode = 7
	CountryCode_AN   CountryCode = 8
	CountryCode_AO   CountryCode = 9
	CountryCode_AR   CountryCode = 10
	CountryCode_AS   CountryCode = 11
	CountryCode_AT   CountryCode = 12
	CountryCode_AU   CountryCode = 13
	CountryCode_AW   CountryCode = 14
	CountryCode_AZ   CountryCode = 15
	CountryCode_BA   CountryCode = 16
	CountryCode_BB   CountryCode = 17
	CountryCode_BD   CountryCode = 18
	CountryCode_BE   CountryCode = 19
	CountryCode_BF   CountryCode = 20
	CountryCode_BG   CountryCode = 21
	CountryCode_BH   CountryCode = 22
	CountryCode_BI   CountryCode = 23
	CountryCode_BJ   CountryCode = 24
	CountryCode_BM   CountryCode = 25
	CountryCode_BN   CountryCode = 26
	CountryCode_BO   CountryCode = 27
	CountryCode_BR   CountryCode = 28
	CountryCode_BS   CountryCode = 29
	CountryCode_BT   CountryCode = 30
	CountryCode_BW   CountryCode = 31
	CountryCode_BY   CountryCode = 32
	CountryCode_BZ   CountryCode = 33
	CountryCode_CA   CountryCode = 34
	CountryCode_CD   CountryCode = 35
	CountryCode_CF   CountryCode = 36
	CountryCode_CG   CountryCode = 37
	CountryCode_CH   CountryCode = 38
	CountryCode_CI   CountryCode = 39
	CountryCode_CK   CountryCode = 40
	CountryCode_CL   CountryCode = 41
	CountryCode_CM   CountryCode = 42
	CountryCode_CN   CountryCode = 43
	CountryCode_CO   CountryCode = 44
	CountryCode_CR   CountryCode = 45
	CountryCode_CU   CountryCode = 46
	CountryCode_CV   CountryCode = 47
	CountryCode_CY   CountryCode = 48
	CountryCode_CZ   CountryCode = 49
	CountryCode_DE   CountryCode = 50
	CountryCode_DJ   CountryCode = 51
	CountryCode_DK   CountryCode = 52
	CountryCode_DM   CountryCode = 53
	CountryCode_DO   CountryCode = 54
	CountryCode_DZ   CountryCode = 55
	CountryCode_EC   CountryCode = 56
	CountryCode_EE   CountryCode = 57
	CountryCode_EG   CountryCode = 58
	CountryCode_ER   CountryCode = 59
	CountryCode_ES   CountryCode = 60
	CountryCode_ET   CountryCode = 61
	CountryCode_FI   CountryCode = 62
	CountryCode_FJ   CountryCode = 63
	CountryCode_FK   CountryCode = 64
	CountryCode_FM   CountryCode = 65
	CountryCode_FO   CountryCode = 66
	CountryCode_FR   CountryCode = 67
	CountryCode_GA   CountryCode = 68
	CountryCode_GB   CountryCode = 69
	CountryCode_GD   CountryCode = 70
	CountryCode_GE   CountryCode = 71
	CountryCode_GF   CountryCode = 72
	CountryCode_GG   CountryCode = 73
	CountryCode_GH   CountryCode = 74
	CountryCode_GI   CountryCode = 75
	CountryCode_GL   CountryCode = 76
	CountryCode_GM   CountryCode = 77
	CountryCode_GN   CountryCode = 78
	CountryCode_GP   CountryCode = 79
	CountryCode_GQ   CountryCode = 80
	CountryCode_GR   CountryCode = 81
	CountryCode_GT   CountryCode = 82
	CountryCode_GU   CountryCode = 83
	CountryCode_GW   CountryCode = 84
	CountryCode_GY   CountryCode = 85
	CountryCode_HK   CountryCode = 86
	CountryCode_HN   CountryCode = 87
	CountryCode_HR   CountryCode = 88
	CountryCode_HT   CountryCode = 89
	CountryCode_HU   CountryCode = 90
	CountryCode_IC   CountryCode = 91
	CountryCode_ID   CountryCode = 92
	CountryCode_IE   CountryCode = 93
	CountryCode_IL   CountryCode = 94
	CountryCode_IN   CountryCode = 95
	CountryCode_IQ   CountryCode = 96
	CountryCode_IR   CountryCode = 97
	CountryCode_IS   CountryCode = 98
	CountryCode_IT   CountryCode = 99
	CountryCode_JE   CountryCode = 100
	CountryCode_JM   CountryCode = 101
	CountryCode_JO   CountryCode = 102
	CountryCode_JP   CountryCode = 103
	CountryCode_KE   CountryCode = 104
	CountryCode_KG   CountryCode = 105
	CountryCode_KH   CountryCode = 106
	CountryCode_KI   CountryCode = 107
	CountryCode_KR   CountryCode = 108
	CountryCode_KV   CountryCode = 109
	CountryCode_KW   CountryCode = 110
	CountryCode_KY   CountryCode = 111
	CountryCode_KZ   CountryCode = 112
	CountryCode_LA   CountryCode = 113
	CountryCode_LB   CountryCode = 114
	CountryCode_LC   CountryCode = 115
	CountryCode_LI   CountryCode = 116
	CountryCode_LK   CountryCode = 117
	CountryCode_LR   CountryCode = 118
	CountryCode_LS   CountryCode = 119
	CountryCode_LT   CountryCode = 120
	CountryCode_LU   CountryCode = 121
	CountryCode_LV   CountryCode = 122
	CountryCode_LY   CountryCode = 123
	CountryCode_MA   CountryCode = 124
	CountryCode_MC   CountryCode = 125
	CountryCode_MD   CountryCode = 126
	CountryCode_ME   CountryCode = 127
	CountryCode_MG   CountryCode = 128
	CountryCode_MH   CountryCode = 129
	CountryCode_MK   CountryCode = 130
	CountryCode_ML   CountryCode = 131
	CountryCode_MM   CountryCode = 132
	CountryCode_MN   CountryCode = 133
	CountryCode_MO   CountryCode = 134
	CountryCode_MP   CountryCode = 135
	CountryCode_MQ   CountryCode = 136
	CountryCode_MR   CountryCode = 137
	CountryCode_MS   CountryCode = 138
	CountryCode_MT   CountryCode = 139
	CountryCode_MU   CountryCode = 140
	CountryCode_MV   CountryCode = 141
	CountryCode_MW   CountryCode = 142
	CountryCode_MX   CountryCode = 143
	CountryCode_MY   CountryCode = 144
	CountryCode_MZ   CountryCode = 145
	CountryCode_NA   CountryCode = 146
	CountryCode_NC   CountryCode = 147
	CountryCode_NE   CountryCode = 148
	CountryCode_NG   CountryCode = 149
	CountryCode_NI   CountryCode = 150
	CountryCode_NL   CountryCode = 151
	CountryCode_NO   CountryCode = 152
	CountryCode_NP   CountryCode = 153
	CountryCode_NR   CountryCode = 154
	CountryCode_NU   CountryCode = 155
	CountryCode_NZ   CountryCode = 156
	CountryCode_OM   CountryCode = 157
	CountryCode_PA   CountryCode = 158
	CountryCode_PE   CountryCode = 159
	CountryCode_PF   CountryCode = 160
	CountryCode_PG   CountryCode = 161
	CountryCode_PH   CountryCode = 162
	CountryCode_PK   CountryCode = 163
	CountryCode_PL   CountryCode = 164
	CountryCode_PR   CountryCode = 165
	CountryCode_PT   CountryCode = 166
	CountryCode_PW   CountryCode = 167
	CountryCode_PY   CountryCode = 168
	CountryCode_QA   CountryCode = 169
	CountryCode_RE   CountryCode = 170
	CountryCode_RO   CountryCode = 171
	CountryCode_RS   CountryCode = 172
	CountryCode_RU   CountryCode = 173
	CountryCode_RW   CountryCode = 174
	CountryCode_SA   CountryCode = 175
	CountryCode_SB   CountryCode = 176
	CountryCode_SC   CountryCode = 177
	CountryCode_SD   CountryCode = 178
	CountryCode_SE   CountryCode = 179
	CountryCode_SG   CountryCode = 180
	CountryCode_SH   CountryCode = 181
	CountryCode_SI   CountryCode = 182
	CountryCode_SK   CountryCode = 183
	CountryCode_SL   CountryCode = 184
	CountryCode_SM   CountryCode = 185
	CountryCode_SN   CountryCode = 186
	CountryCode_SO   CountryCode = 187
	CountryCode_SR   CountryCode = 188
	CountryCode_SS   CountryCode = 189
	CountryCode_ST   CountryCode = 190
	CountryCode_SV   CountryCode = 191
	CountryCode_SY   CountryCode = 192
	CountryCode_SZ   CountryCode = 193
	CountryCode_TC   CountryCode = 194
	CountryCode_TD   CountryCode = 195
	CountryCode_TG   CountryCode = 196
	CountryCode_TH   CountryCode = 197
	CountryCode_TJ   CountryCode = 198
	CountryCode_TL   CountryCode = 199
	CountryCode_TN   CountryCode = 200
	CountryCode_TO   CountryCode = 201
	CountryCode_TR   CountryCode = 202
	CountryCode_TT   CountryCode = 203
	CountryCode_TV   CountryCode = 204
	CountryCode_TW   CountryCode = 205
	CountryCode_TZ   CountryCode = 206
	CountryCode_UA   CountryCode = 207
	CountryCode_UG   CountryCode = 208
	CountryCode_US   CountryCode = 209
	CountryCode_UY   CountryCode = 210
	CountryCode_UZ   CountryCode = 211
	CountryCode_VA   CountryCode = 212
	CountryCode_VC   CountryCode = 213
	CountryCode_VE   CountryCode = 214
	CountryCode_VG   CountryCode = 215
	CountryCode_VI   CountryCode = 216
	CountryCode_VN   CountryCode = 217
	CountryCode_VU   CountryCode = 218
	CountryCode_WS   CountryCode = 219
	CountryCode_XB   CountryCode = 220
	CountryCode_XC   CountryCode = 221
	CountryCode_XE   CountryCode = 222
	CountryCode_XM   CountryCode = 223
	CountryCode_XN   CountryCode = 224
	CountryCode_XS   CountryCode = 225
	CountryCode_XY   CountryCode = 226
	CountryCode_YE   CountryCode = 227
	CountryCode_YT   CountryCode = 228
	CountryCode_ZA   CountryCode = 229
	CountryCode_ZM   CountryCode = 230
	CountryCode_ZW   CountryCode = 231
)

// Enum value maps for CountryCode.
var (
	CountryCode_name = map[int32]string{
		0:   "null",
		1:   "AD",
		2:   "AE",
		3:   "AF",
		4:   "AG",
		5:   "AI",
		6:   "AL",
		7:   "AM",
		8:   "AN",
		9:   "AO",
		10:  "AR",
		11:  "AS",
		12:  "AT",
		13:  "AU",
		14:  "AW",
		15:  "AZ",
		16:  "BA",
		17:  "BB",
		18:  "BD",
		19:  "BE",
		20:  "BF",
		21:  "BG",
		22:  "BH",
		23:  "BI",
		24:  "BJ",
		25:  "BM",
		26:  "BN",
		27:  "BO",
		28:  "BR",
		29:  "BS",
		30:  "BT",
		31:  "BW",
		32:  "BY",
		33:  "BZ",
		34:  "CA",
		35:  "CD",
		36:  "CF",
		37:  "CG",
		38:  "CH",
		39:  "CI",
		40:  "CK",
		41:  "CL",
		42:  "CM",
		43:  "CN",
		44:  "CO",
		45:  "CR",
		46:  "CU",
		47:  "CV",
		48:  "CY",
		49:  "CZ",
		50:  "DE",
		51:  "DJ",
		52:  "DK",
		53:  "DM",
		54:  "DO",
		55:  "DZ",
		56:  "EC",
		57:  "EE",
		58:  "EG",
		59:  "ER",
		60:  "ES",
		61:  "ET",
		62:  "FI",
		63:  "FJ",
		64:  "FK",
		65:  "FM",
		66:  "FO",
		67:  "FR",
		68:  "GA",
		69:  "GB",
		70:  "GD",
		71:  "GE",
		72:  "GF",
		73:  "GG",
		74:  "GH",
		75:  "GI",
		76:  "GL",
		77:  "GM",
		78:  "GN",
		79:  "GP",
		80:  "GQ",
		81:  "GR",
		82:  "GT",
		83:  "GU",
		84:  "GW",
		85:  "GY",
		86:  "HK",
		87:  "HN",
		88:  "HR",
		89:  "HT",
		90:  "HU",
		91:  "IC",
		92:  "ID",
		93:  "IE",
		94:  "IL",
		95:  "IN",
		96:  "IQ",
		97:  "IR",
		98:  "IS",
		99:  "IT",
		100: "JE",
		101: "JM",
		102: "JO",
		103: "JP",
		104: "KE",
		105: "KG",
		106: "KH",
		107: "KI",
		108: "KR",
		109: "KV",
		110: "KW",
		111: "KY",
		112: "KZ",
		113: "LA",
		114: "LB",
		115: "LC",
		116: "LI",
		117: "LK",
		118: "LR",
		119: "LS",
		120: "LT",
		121: "LU",
		122: "LV",
		123: "LY",
		124: "MA",
		125: "MC",
		126: "MD",
		127: "ME",
		128: "MG",
		129: "MH",
		130: "MK",
		131: "ML",
		132: "MM",
		133: "MN",
		134: "MO",
		135: "MP",
		136: "MQ",
		137: "MR",
		138: "MS",
		139: "MT",
		140: "MU",
		141: "MV",
		142: "MW",
		143: "MX",
		144: "MY",
		145: "MZ",
		146: "NA",
		147: "NC",
		148: "NE",
		149: "NG",
		150: "NI",
		151: "NL",
		152: "NO",
		153: "NP",
		154: "NR",
		155: "NU",
		156: "NZ",
		157: "OM",
		158: "PA",
		159: "PE",
		160: "PF",
		161: "PG",
		162: "PH",
		163: "PK",
		164: "PL",
		165: "PR",
		166: "PT",
		167: "PW",
		168: "PY",
		169: "QA",
		170: "RE",
		171: "RO",
		172: "RS",
		173: "RU",
		174: "RW",
		175: "SA",
		176: "SB",
		177: "SC",
		178: "SD",
		179: "SE",
		180: "SG",
		181: "SH",
		182: "SI",
		183: "SK",
		184: "SL",
		185: "SM",
		186: "SN",
		187: "SO",
		188: "SR",
		189: "SS",
		190: "ST",
		191: "SV",
		192: "SY",
		193: "SZ",
		194: "TC",
		195: "TD",
		196: "TG",
		197: "TH",
		198: "TJ",
		199: "TL",
		200: "TN",
		201: "TO",
		202: "TR",
		203: "TT",
		204: "TV",
		205: "TW",
		206: "TZ",
		207: "UA",
		208: "UG",
		209: "US",
		210: "UY",
		211: "UZ",
		212: "VA",
		213: "VC",
		214: "VE",
		215: "VG",
		216: "VI",
		217: "VN",
		218: "VU",
		219: "WS",
		220: "XB",
		221: "XC",
		222: "XE",
		223: "XM",
		224: "XN",
		225: "XS",
		226: "XY",
		227: "YE",
		228: "YT",
		229: "ZA",
		230: "ZM",
		231: "ZW",
	}
	CountryCode_value = map[string]int32{
		"null": 0,
		"AD":   1,
		"AE":   2,
		"AF":   3,
		"AG":   4,
		"AI":   5,
		"AL":   6,
		"AM":   7,
		"AN":   8,
		"AO":   9,
		"AR":   10,
		"AS":   11,
		"AT":   12,
		"AU":   13,
		"AW":   14,
		"AZ":   15,
		"BA":   16,
		"BB":   17,
		"BD":   18,
		"BE":   19,
		"BF":   20,
		"BG":   21,
		"BH":   22,
		"BI":   23,
		"BJ":   24,
		"BM":   25,
		"BN":   26,
		"BO":   27,
		"BR":   28,
		"BS":   29,
		"BT":   30,
		"BW":   31,
		"BY":   32,
		"BZ":   33,
		"CA":   34,
		"CD":   35,
		"CF":   36,
		"CG":   37,
		"CH":   38,
		"CI":   39,
		"CK":   40,
		"CL":   41,
		"CM":   42,
		"CN":   43,
		"CO":   44,
		"CR":   45,
		"CU":   46,
		"CV":   47,
		"CY":   48,
		"CZ":   49,
		"DE":   50,
		"DJ":   51,
		"DK":   52,
		"DM":   53,
		"DO":   54,
		"DZ":   55,
		"EC":   56,
		"EE":   57,
		"EG":   58,
		"ER":   59,
		"ES":   60,
		"ET":   61,
		"FI":   62,
		"FJ":   63,
		"FK":   64,
		"FM":   65,
		"FO":   66,
		"FR":   67,
		"GA":   68,
		"GB":   69,
		"GD":   70,
		"GE":   71,
		"GF":   72,
		"GG":   73,
		"GH":   74,
		"GI":   75,
		"GL":   76,
		"GM":   77,
		"GN":   78,
		"GP":   79,
		"GQ":   80,
		"GR":   81,
		"GT":   82,
		"GU":   83,
		"GW":   84,
		"GY":   85,
		"HK":   86,
		"HN":   87,
		"HR":   88,
		"HT":   89,
		"HU":   90,
		"IC":   91,
		"ID":   92,
		"IE":   93,
		"IL":   94,
		"IN":   95,
		"IQ":   96,
		"IR":   97,
		"IS":   98,
		"IT":   99,
		"JE":   100,
		"JM":   101,
		"JO":   102,
		"JP":   103,
		"KE":   104,
		"KG":   105,
		"KH":   106,
		"KI":   107,
		"KR":   108,
		"KV":   109,
		"KW":   110,
		"KY":   111,
		"KZ":   112,
		"LA":   113,
		"LB":   114,
		"LC":   115,
		"LI":   116,
		"LK":   117,
		"LR":   118,
		"LS":   119,
		"LT":   120,
		"LU":   121,
		"LV":   122,
		"LY":   123,
		"MA":   124,
		"MC":   125,
		"MD":   126,
		"ME":   127,
		"MG":   128,
		"MH":   129,
		"MK":   130,
		"ML":   131,
		"MM":   132,
		"MN":   133,
		"MO":   134,
		"MP":   135,
		"MQ":   136,
		"MR":   137,
		"MS":   138,
		"MT":   139,
		"MU":   140,
		"MV":   141,
		"MW":   142,
		"MX":   143,
		"MY":   144,
		"MZ":   145,
		"NA":   146,
		"NC":   147,
		"NE":   148,
		"NG":   149,
		"NI":   150,
		"NL":   151,
		"NO":   152,
		"NP":   153,
		"NR":   154,
		"NU":   155,
		"NZ":   156,
		"OM":   157,
		"PA":   158,
		"PE":   159,
		"PF":   160,
		"PG":   161,
		"PH":   162,
		"PK":   163,
		"PL":   164,
		"PR":   165,
		"PT":   166,
		"PW":   167,
		"PY":   168,
		"QA":   169,
		"RE":   170,
		"RO":   171,
		"RS":   172,
		"RU":   173,
		"RW":   174,
		"SA":   175,
		"SB":   176,
		"SC":   177,
		"SD":   178,
		"SE":   179,
		"SG":   180,
		"SH":   181,
		"SI":   182,
		"SK":   183,
		"SL":   184,
		"SM":   185,
		"SN":   186,
		"SO":   187,
		"SR":   188,
		"SS":   189,
		"ST":   190,
		"SV":   191,
		"SY":   192,
		"SZ":   193,
		"TC":   194,
		"TD":   195,
		"TG":   196,
		"TH":   197,
		"TJ":   198,
		"TL":   199,
		"TN":   200,
		"TO":   201,
		"TR":   202,
		"TT":   203,
		"TV":   204,
		"TW":   205,
		"TZ":   206,
		"UA":   207,
		"UG":   208,
		"US":   209,
		"UY":   210,
		"UZ":   211,
		"VA":   212,
		"VC":   213,
		"VE":   214,
		"VG":   215,
		"VI":   216,
		"VN":   217,
		"VU":   218,
		"WS":   219,
		"XB":   220,
		"XC":   221,
		"XE":   222,
		"XM":   223,
		"XN":   224,
		"XS":   225,
		"XY":   226,
		"YE":   227,
		"YT":   228,
		"ZA":   229,
		"ZM":   230,
		"ZW":   231,
	}
)

func (x CountryCode) Enum() *CountryCode {
	p := new(CountryCode)
	*p = x
	return p
}

func (x CountryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_gozagel_proto_enumTypes[0].Descriptor()
}

func (CountryCode) Type() protoreflect.EnumType {
	return &file_api_gozagel_proto_enumTypes[0]
}

func (x CountryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCode.Descriptor instead.
func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{0}
}

type ShipmentStatus int32

const (
	ShipmentStatus_delivery_failed  ShipmentStatus = 0
	ShipmentStatus_draft            ShipmentStatus = 1
	ShipmentStatus_purchased        ShipmentStatus = 2
	ShipmentStatus_cancelled        ShipmentStatus = 3
	ShipmentStatus_shipped          ShipmentStatus = 4
	ShipmentStatus_in_transit       ShipmentStatus = 5
	ShipmentStatus_delivered        ShipmentStatus = 6
	ShipmentStatus_needs_attention  ShipmentStatus = 7
	ShipmentStatus_out_for_delivery ShipmentStatus = 8
)

// Enum value maps for ShipmentStatus.
var (
	ShipmentStatus_name = map[int32]string{
		0: "delivery_failed",
		1: "draft",
		2: "purchased",
		3: "cancelled",
		4: "shipped",
		5: "in_transit",
		6: "delivered",
		7: "needs_attention",
		8: "out_for_delivery",
	}
	ShipmentStatus_value = map[string]int32{
		"delivery_failed":  0,
		"draft":            1,
		"purchased":        2,
		"cancelled":        3,
		"shipped":          4,
		"in_transit":       5,
		"delivered":        6,
		"needs_attention":  7,
		"out_for_delivery": 8,
	}
)

func (x ShipmentStatus) Enum() *ShipmentStatus {
	p := new(ShipmentStatus)
	*p = x
	return p
}

func (x ShipmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShipmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_gozagel_proto_enumTypes[1].Descriptor()
}

func (ShipmentStatus) Type() protoreflect.EnumType {
	return &file_api_gozagel_proto_enumTypes[1]
}

func (x ShipmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShipmentStatus.Descriptor instead.
func (ShipmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{1}
}

func (x *AuthResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type QuoteRequestsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCountry string  `protobuf:"bytes,1,opt,name=from_country,json=fromCountry,proto3" json:"from_country,omitempty"`
	FromCity    string  `protobuf:"bytes,2,opt,name=from_city,json=fromCity,proto3" json:"from_city,omitempty"`
	ToCountry   string  `protobuf:"bytes,3,opt,name=to_country,json=toCountry,proto3" json:"to_country,omitempty"`
	ToCity      string  `protobuf:"bytes,4,opt,name=to_city,json=toCity,proto3" json:"to_city,omitempty"`
	Length      float64 `protobuf:"fixed64,5,opt,name=length,proto3" json:"length,omitempty"`
	Width       float64 `protobuf:"fixed64,6,opt,name=width,proto3" json:"width,omitempty"`
	Height      float64 `protobuf:"fixed64,7,opt,name=height,proto3" json:"height,omitempty"`
	Weight      float64 `protobuf:"fixed64,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Residential bool    `protobuf:"varint,13,opt,name=residential,proto3" json:"residential,omitempty"`
}

func (x *QuoteRequestsBody) Reset() {
	*x = QuoteRequestsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequestsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequestsBody) ProtoMessage() {}

func (x *QuoteRequestsBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequestsBody.ProtoReflect.Descriptor instead.
func (*QuoteRequestsBody) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{2}
}

func (x *QuoteRequestsBody) GetFromCountry() string {
	if x != nil {
		return x.FromCountry
	}
	return ""
}

func (x *QuoteRequestsBody) GetFromCity() string {
	if x != nil {
		return x.FromCity
	}
	return ""
}

func (x *QuoteRequestsBody) GetToCountry() string {
	if x != nil {
		return x.ToCountry
	}
	return ""
}

func (x *QuoteRequestsBody) GetToCity() string {
	if x != nil {
		return x.ToCity
	}
	return ""
}

func (x *QuoteRequestsBody) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *QuoteRequestsBody) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *QuoteRequestsBody) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *QuoteRequestsBody) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *QuoteRequestsBody) GetResidential() bool {
	if x != nil {
		return x.Residential
	}
	return false
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Carrier   string  `protobuf:"bytes,2,opt,name=carrier,proto3" json:"carrier,omitempty"`
	CarrierId string  `protobuf:"bytes,3,opt,name=carrier_id,json=carrierId,proto3" json:"carrier_id,omitempty"`
	Currency  string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Rate      float32 `protobuf:"fixed32,5,opt,name=rate,proto3" json:"rate,omitempty"`
	Delay     int32   `protobuf:"varint,6,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Quote) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *Quote) GetCarrierId() string {
	if x != nil {
		return x.CarrierId
	}
	return ""
}

func (x *Quote) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Quote) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Quote) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type QuoteRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quoterequestsid string `protobuf:"bytes,1,opt,name=quoterequestsid,proto3" json:"quoterequestsid,omitempty"`
}

func (x *QuoteRequestsResponse) Reset() {
	*x = QuoteRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequestsResponse) ProtoMessage() {}

func (x *QuoteRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequestsResponse.ProtoReflect.Descriptor instead.
func (*QuoteRequestsResponse) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{4}
}

func (x *QuoteRequestsResponse) GetQuoterequestsid() string {
	if x != nil {
		return x.Quoterequestsid
	}
	return ""
}

type QuotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes []*Quote `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *QuotesResponse) Reset() {
	*x = QuotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesResponse) ProtoMessage() {}

func (x *QuotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesResponse.ProtoReflect.Descriptor instead.
func (*QuotesResponse) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{5}
}

func (x *QuotesResponse) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type ShipmentRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient        *ShipmentActor `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Shipper          *ShipmentActor `protobuf:"bytes,2,opt,name=shipper,proto3" json:"shipper,omitempty"`
	SelectedRateId   string         `protobuf:"bytes,11,opt,name=selected_rate_id,json=selectedRateId,proto3" json:"selected_rate_id,omitempty"`
	Currency         string         `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	TotalAmountCents int64          `protobuf:"varint,13,opt,name=total_amount_cents,json=totalAmountCents,proto3" json:"total_amount_cents,omitempty"`
}

func (x *ShipmentRequestBody) Reset() {
	*x = ShipmentRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRequestBody) ProtoMessage() {}

func (x *ShipmentRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRequestBody.ProtoReflect.Descriptor instead.
func (*ShipmentRequestBody) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{6}
}

func (x *ShipmentRequestBody) GetRecipient() *ShipmentActor {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *ShipmentRequestBody) GetShipper() *ShipmentActor {
	if x != nil {
		return x.Shipper
	}
	return nil
}

func (x *ShipmentRequestBody) GetSelectedRateId() string {
	if x != nil {
		return x.SelectedRateId
	}
	return ""
}

func (x *ShipmentRequestBody) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ShipmentRequestBody) GetTotalAmountCents() int64 {
	if x != nil {
		return x.TotalAmountCents
	}
	return 0
}

type Shipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrackingUrl string               `protobuf:"bytes,2,opt,name=tracking_url,json=trackingUrl,proto3" json:"tracking_url,omitempty"`
	Shipper     *ShipmentActor       `protobuf:"bytes,3,opt,name=shipper,proto3" json:"shipper,omitempty"`
	Recipient   *ShipmentActor       `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Parcels     []*QuoteRequestsBody `protobuf:"bytes,5,rep,name=parcels,proto3" json:"parcels,omitempty"`
	CreatedAt   string               `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status      ShipmentStatus       `protobuf:"varint,7,opt,name=status,proto3,enum=api.ShipmentStatus" json:"status,omitempty"`
}

func (x *Shipment) Reset() {
	*x = Shipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shipment) ProtoMessage() {}

func (x *Shipment) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shipment.ProtoReflect.Descriptor instead.
func (*Shipment) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{7}
}

func (x *Shipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Shipment) GetTrackingUrl() string {
	if x != nil {
		return x.TrackingUrl
	}
	return ""
}

func (x *Shipment) GetShipper() *ShipmentActor {
	if x != nil {
		return x.Shipper
	}
	return nil
}

func (x *Shipment) GetRecipient() *ShipmentActor {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Shipment) GetParcels() []*QuoteRequestsBody {
	if x != nil {
		return x.Parcels
	}
	return nil
}

func (x *Shipment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Shipment) GetStatus() ShipmentStatus {
	if x != nil {
		return x.Status
	}
	return ShipmentStatus_delivery_failed
}

type GetShipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId string `protobuf:"bytes,1,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
}

func (x *GetShipmentRequest) Reset() {
	*x = GetShipmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRequest) ProtoMessage() {}

func (x *GetShipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRequest.ProtoReflect.Descriptor instead.
func (*GetShipmentRequest) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{8}
}

func (x *GetShipmentRequest) GetShipmentId() string {
	if x != nil {
		return x.ShipmentId
	}
	return ""
}

type PaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentRequestId string `protobuf:"bytes,1,opt,name=shipment_request_id,json=shipmentRequestId,proto3" json:"shipment_request_id,omitempty"`
	CustomerEmail     string `protobuf:"bytes,2,opt,name=customer_email,json=customerEmail,proto3" json:"customer_email,omitempty"`
	Currency          string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	TotalAmountCents  int64  `protobuf:"varint,4,opt,name=total_amount_cents,json=totalAmountCents,proto3" json:"total_amount_cents,omitempty"`
	ProductName       string `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *PaymentRequest) Reset() {
	*x = PaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRequest) ProtoMessage() {}

func (x *PaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRequest.ProtoReflect.Descriptor instead.
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{9}
}

func (x *PaymentRequest) GetShipmentRequestId() string {
	if x != nil {
		return x.ShipmentRequestId
	}
	return ""
}

func (x *PaymentRequest) GetCustomerEmail() string {
	if x != nil {
		return x.CustomerEmail
	}
	return ""
}

func (x *PaymentRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentRequest) GetTotalAmountCents() int64 {
	if x != nil {
		return x.TotalAmountCents
	}
	return 0
}

func (x *PaymentRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type ShipmentActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalCode       string      `protobuf:"bytes,1,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	City             string      `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	FederalTaxId     string      `protobuf:"bytes,3,opt,name=federal_tax_id,json=federalTaxId,proto3" json:"federal_tax_id,omitempty"`
	StateTaxId       string      `protobuf:"bytes,4,opt,name=state_tax_id,json=stateTaxId,proto3" json:"state_tax_id,omitempty"`
	PersonName       string      `protobuf:"bytes,5,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`
	CompanyName      string      `protobuf:"bytes,6,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CountryCode      CountryCode `protobuf:"varint,7,opt,name=country_code,json=countryCode,proto3,enum=api.CountryCode" json:"country_code,omitempty"`
	Email            string      `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber      string      `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	StateCode        string      `protobuf:"bytes,10,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	Residential      bool        `protobuf:"varint,11,opt,name=residential,proto3" json:"residential,omitempty"`
	StreetNumber     string      `protobuf:"bytes,12,opt,name=street_number,json=streetNumber,proto3" json:"street_number,omitempty"`
	AddressLine1     string      `protobuf:"bytes,13,opt,name=address_line1,json=addressLine1,proto3" json:"address_line1,omitempty"`
	AddressLine2     string      `protobuf:"bytes,14,opt,name=address_line2,json=addressLine2,proto3" json:"address_line2,omitempty"`
	ValidateLocation bool        `protobuf:"varint,15,opt,name=validate_location,json=validateLocation,proto3" json:"validate_location,omitempty"`
}

func (x *ShipmentActor) Reset() {
	*x = ShipmentActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gozagel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentActor) ProtoMessage() {}

func (x *ShipmentActor) ProtoReflect() protoreflect.Message {
	mi := &file_api_gozagel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentActor.ProtoReflect.Descriptor instead.
func (*ShipmentActor) Descriptor() ([]byte, []int) {
	return file_api_gozagel_proto_rawDescGZIP(), []int{10}
}

func (x *ShipmentActor) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *ShipmentActor) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShipmentActor) GetFederalTaxId() string {
	if x != nil {
		return x.FederalTaxId
	}
	return ""
}

func (x *ShipmentActor) GetStateTaxId() string {
	if x != nil {
		return x.StateTaxId
	}
	return ""
}

func (x *ShipmentActor) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *ShipmentActor) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ShipmentActor) GetCountryCode() CountryCode {
	if x != nil {
		return x.CountryCode
	}
	return CountryCode_null
}

func (x *ShipmentActor) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ShipmentActor) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ShipmentActor) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *ShipmentActor) GetResidential() bool {
	if x != nil {
		return x.Residential
	}
	return false
}

func (x *ShipmentActor) GetStreetNumber() string {
	if x != nil {
		return x.StreetNumber
	}
	return ""
}

func (x *ShipmentActor) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *ShipmentActor) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *ShipmentActor) GetValidateLocation() bool {
	if x != nil {
		return x.ValidateLocation
	}
	return false
}

var File_api_gozagel_proto protoreflect.FileDescriptor

var file_api_gozagel_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x7a, 0x61, 0x67, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x38, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x24, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22,
	0x41, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x69, 0x64, 0x22, 0x34, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x32, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xb7,
	0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x44, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x46, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x47, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x49, 0x10, 0x05,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x4d, 0x10, 0x07,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x4f, 0x10, 0x09,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x53, 0x10, 0x0b,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x55, 0x10, 0x0d,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x57, 0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x5a, 0x10, 0x0f,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x41, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x42, 0x10, 0x11,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x44, 0x10, 0x12, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x45, 0x10, 0x13,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x46, 0x10, 0x14, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x47, 0x10, 0x15,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x48, 0x10, 0x16, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x49, 0x10, 0x17,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x4a, 0x10, 0x18, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x4d, 0x10, 0x19,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x4e, 0x10, 0x1a, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x4f, 0x10, 0x1b,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x52, 0x10, 0x1c, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x53, 0x10, 0x1d,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x54, 0x10, 0x1e, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x57, 0x10, 0x1f,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x59, 0x10, 0x20, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x5a, 0x10, 0x21,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x41, 0x10, 0x22, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x44, 0x10, 0x23,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x46, 0x10, 0x24, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x47, 0x10, 0x25,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x48, 0x10, 0x26, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x49, 0x10, 0x27,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x4b, 0x10, 0x28, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x4c, 0x10, 0x29,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x2a, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x4e, 0x10, 0x2b,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x4f, 0x10, 0x2c, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x52, 0x10, 0x2d,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x55, 0x10, 0x2e, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x56, 0x10, 0x2f,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x59, 0x10, 0x30, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x5a, 0x10, 0x31,
	0x12, 0x06, 0x0a, 0x02, 0x44, 0x45, 0x10, 0x32, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4a, 0x10, 0x33,
	0x12, 0x06, 0x0a, 0x02, 0x44, 0x4b, 0x10, 0x34, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4d, 0x10, 0x35,
	0x12, 0x06, 0x0a, 0x02, 0x44, 0x4f, 0x10, 0x36, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x5a, 0x10, 0x37,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x43, 0x10, 0x38, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x45, 0x10, 0x39,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x47, 0x10, 0x3a, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x52, 0x10, 0x3b,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x53, 0x10, 0x3c, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x54, 0x10, 0x3d,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x49, 0x10, 0x3e, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x4a, 0x10, 0x3f,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x4b, 0x10, 0x40, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x4d, 0x10, 0x41,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x4f, 0x10, 0x42, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x43,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x41, 0x10, 0x44, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x42, 0x10, 0x45,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x44, 0x10, 0x46, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x47,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x46, 0x10, 0x48, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x47, 0x10, 0x49,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x48, 0x10, 0x4a, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x49, 0x10, 0x4b,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x4c, 0x10, 0x4c, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4d, 0x10, 0x4d,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x4e, 0x10, 0x4e, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x50, 0x10, 0x4f,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x51, 0x10, 0x50, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x52, 0x10, 0x51,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x52, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x55, 0x10, 0x53,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x57, 0x10, 0x54, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x59, 0x10, 0x55,
	0x12, 0x06, 0x0a, 0x02, 0x48, 0x4b, 0x10, 0x56, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x4e, 0x10, 0x57,
	0x12, 0x06, 0x0a, 0x02, 0x48, 0x52, 0x10, 0x58, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x54, 0x10, 0x59,
	0x12, 0x06, 0x0a, 0x02, 0x48, 0x55, 0x10, 0x5a, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x43, 0x10, 0x5b,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x5c, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x45, 0x10, 0x5d,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x4c, 0x10, 0x5e, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x5f,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x51, 0x10, 0x60, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x52, 0x10, 0x61,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x53, 0x10, 0x62, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x54, 0x10, 0x63,
	0x12, 0x06, 0x0a, 0x02, 0x4a, 0x45, 0x10, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x4d, 0x10, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x4a, 0x4f, 0x10, 0x66, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x50, 0x10, 0x67,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x45, 0x10, 0x68, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x47, 0x10, 0x69,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x48, 0x10, 0x6a, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x49, 0x10, 0x6b,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x52, 0x10, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x56, 0x10, 0x6d,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x57, 0x10, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x59, 0x10, 0x6f,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x5a, 0x10, 0x70, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x41, 0x10, 0x71,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x42, 0x10, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x43, 0x10, 0x73,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x49, 0x10, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x4b, 0x10, 0x75,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x52, 0x10, 0x76, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x77,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x78, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x55, 0x10, 0x79,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x56, 0x10, 0x7a, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x59, 0x10, 0x7b,
	0x12, 0x06, 0x0a, 0x02, 0x4d, 0x41, 0x10, 0x7c, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x43, 0x10, 0x7d,
	0x12, 0x06, 0x0a, 0x02, 0x4d, 0x44, 0x10, 0x7e, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x45, 0x10, 0x7f,
	0x12, 0x07, 0x0a, 0x02, 0x4d, 0x47, 0x10, 0x80, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x48, 0x10,
	0x81, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x4b, 0x10, 0x82, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d,
	0x4c, 0x10, 0x83, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x4d, 0x10, 0x84, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x4d, 0x4e, 0x10, 0x85, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x4f, 0x10, 0x86, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x4d, 0x50, 0x10, 0x87, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x51, 0x10, 0x88,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x52, 0x10, 0x89, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x53,
	0x10, 0x8a, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x54, 0x10, 0x8b, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x4d, 0x55, 0x10, 0x8c, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x56, 0x10, 0x8d, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x4d, 0x57, 0x10, 0x8e, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x58, 0x10, 0x8f, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x4d, 0x59, 0x10, 0x90, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4d, 0x5a, 0x10,
	0x91, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x92, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e,
	0x43, 0x10, 0x93, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x94, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x4e, 0x47, 0x10, 0x95, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x49, 0x10, 0x96, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x4e, 0x4c, 0x10, 0x97, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x98,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x50, 0x10, 0x99, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x52,
	0x10, 0x9a, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x55, 0x10, 0x9b, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x4e, 0x5a, 0x10, 0x9c, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x4d, 0x10, 0x9d, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x50, 0x41, 0x10, 0x9e, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x45, 0x10, 0x9f, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x50, 0x46, 0x10, 0xa0, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x47, 0x10,
	0xa1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x48, 0x10, 0xa2, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50,
	0x4b, 0x10, 0xa3, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x4c, 0x10, 0xa4, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x50, 0x52, 0x10, 0xa5, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x54, 0x10, 0xa6, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x50, 0x57, 0x10, 0xa7, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x50, 0x59, 0x10, 0xa8,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x51, 0x41, 0x10, 0xa9, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x52, 0x45,
	0x10, 0xaa, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x52, 0x4f, 0x10, 0xab, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x52, 0x53, 0x10, 0xac, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x52, 0x55, 0x10, 0xad, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x52, 0x57, 0x10, 0xae, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x41, 0x10, 0xaf, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x53, 0x42, 0x10, 0xb0, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x43, 0x10,
	0xb1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x44, 0x10, 0xb2, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53,
	0x45, 0x10, 0xb3, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x47, 0x10, 0xb4, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x53, 0x48, 0x10, 0xb5, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x49, 0x10, 0xb6, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x53, 0x4b, 0x10, 0xb7, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x4c, 0x10, 0xb8,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x4d, 0x10, 0xb9, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x4e,
	0x10, 0xba, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x4f, 0x10, 0xbb, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x53, 0x52, 0x10, 0xbc, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x53, 0x10, 0xbd, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x53, 0x54, 0x10, 0xbe, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x56, 0x10, 0xbf, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x53, 0x59, 0x10, 0xc0, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x53, 0x5a, 0x10,
	0xc1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x43, 0x10, 0xc2, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54,
	0x44, 0x10, 0xc3, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x47, 0x10, 0xc4, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x54, 0x48, 0x10, 0xc5, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x4a, 0x10, 0xc6, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x54, 0x4c, 0x10, 0xc7, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x4e, 0x10, 0xc8,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x4f, 0x10, 0xc9, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x52,
	0x10, 0xca, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x54, 0x10, 0xcb, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x54, 0x56, 0x10, 0xcc, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x57, 0x10, 0xcd, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x54, 0x5a, 0x10, 0xce, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x55, 0x41, 0x10, 0xcf, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x55, 0x47, 0x10, 0xd0, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x55, 0x53, 0x10,
	0xd1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x55, 0x59, 0x10, 0xd2, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x55,
	0x5a, 0x10, 0xd3, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x56, 0x41, 0x10, 0xd4, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x56, 0x43, 0x10, 0xd5, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x56, 0x45, 0x10, 0xd6, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x56, 0x47, 0x10, 0xd7, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x56, 0x49, 0x10, 0xd8,
	0x01, 0x12, 0x07, 0x0a, 0x02, 0x56, 0x4e, 0x10, 0xd9, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x56, 0x55,
	0x10, 0xda, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x57, 0x53, 0x10, 0xdb, 0x01, 0x12, 0x07, 0x0a, 0x02,
	0x58, 0x42, 0x10, 0xdc, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x58, 0x43, 0x10, 0xdd, 0x01, 0x12, 0x07,
	0x0a, 0x02, 0x58, 0x45, 0x10, 0xde, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x58, 0x4d, 0x10, 0xdf, 0x01,
	0x12, 0x07, 0x0a, 0x02, 0x58, 0x4e, 0x10, 0xe0, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x58, 0x53, 0x10,
	0xe1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x58, 0x59, 0x10, 0xe2, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x59,
	0x45, 0x10, 0xe3, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x59, 0x54, 0x10, 0xe4, 0x01, 0x12, 0x07, 0x0a,
	0x02, 0x5a, 0x41, 0x10, 0xe5, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x5a, 0x4d, 0x10, 0xe6, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x5a, 0x57, 0x10, 0xe7, 0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x10, 0x08,
	0x32, 0x5e, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x8e, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x7a, 0x61, 0x67, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_gozagel_proto_rawDescOnce sync.Once
	file_api_gozagel_proto_rawDescData = file_api_gozagel_proto_rawDesc
)

func file_api_gozagel_proto_rawDescGZIP() []byte {
	file_api_gozagel_proto_rawDescOnce.Do(func() {
		file_api_gozagel_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_gozagel_proto_rawDescData)
	})
	return file_api_gozagel_proto_rawDescData
}

var file_api_gozagel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_gozagel_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_gozagel_proto_goTypes = []any{
	(CountryCode)(0),              // 0: api.CountryCode
	(ShipmentStatus)(0),           // 1: api.ShipmentStatus
	(*User)(nil),                  // 2: api.User
	(*AuthResponse)(nil),          // 3: api.AuthResponse
	(*QuoteRequestsBody)(nil),     // 4: api.QuoteRequestsBody
	(*Quote)(nil),                 // 5: api.Quote
	(*QuoteRequestsResponse)(nil), // 6: api.QuoteRequestsResponse
	(*QuotesResponse)(nil),        // 7: api.QuotesResponse
	(*ShipmentRequestBody)(nil),   // 8: api.ShipmentRequestBody
	(*Shipment)(nil),              // 9: api.Shipment
	(*GetShipmentRequest)(nil),    // 10: api.GetShipmentRequest
	(*PaymentRequest)(nil),        // 11: api.PaymentRequest
	(*ShipmentActor)(nil),         // 12: api.ShipmentActor
}
var file_api_gozagel_proto_depIdxs = []int32{
	5,  // 0: api.QuotesResponse.quotes:type_name -> api.Quote
	12, // 1: api.ShipmentRequestBody.recipient:type_name -> api.ShipmentActor
	12, // 2: api.ShipmentRequestBody.shipper:type_name -> api.ShipmentActor
	12, // 3: api.Shipment.shipper:type_name -> api.ShipmentActor
	12, // 4: api.Shipment.recipient:type_name -> api.ShipmentActor
	4,  // 5: api.Shipment.parcels:type_name -> api.QuoteRequestsBody
	1,  // 6: api.Shipment.status:type_name -> api.ShipmentStatus
	0,  // 7: api.ShipmentActor.country_code:type_name -> api.CountryCode
	2,  // 8: api.AuthService.Login:input_type -> api.User
	2,  // 9: api.AuthService.Register:input_type -> api.User
	4,  // 10: api.OrdersService.RequestQuotes:input_type -> api.QuoteRequestsBody
	6,  // 11: api.OrdersService.GetQuotes:input_type -> api.QuoteRequestsResponse
	8,  // 12: api.OrdersService.CreateShipment:input_type -> api.ShipmentRequestBody
	10, // 13: api.OrdersService.GetShipment:input_type -> api.GetShipmentRequest
	3,  // 14: api.AuthService.Login:output_type -> api.AuthResponse
	3,  // 15: api.AuthService.Register:output_type -> api.AuthResponse
	6,  // 16: api.OrdersService.RequestQuotes:output_type -> api.QuoteRequestsResponse
	7,  // 17: api.OrdersService.GetQuotes:output_type -> api.QuotesResponse
	10, // 18: api.OrdersService.CreateShipment:output_type -> api.GetShipmentRequest
	9,  // 19: api.OrdersService.GetShipment:output_type -> api.Shipment
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_gozagel_proto_init() }
func file_api_gozagel_proto_init() {
	if File_api_gozagel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_gozagel_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QuoteRequestsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QuoteRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*QuotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ShipmentRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Shipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetShipmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gozagel_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ShipmentActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gozagel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_gozagel_proto_goTypes,
		DependencyIndexes: file_api_gozagel_proto_depIdxs,
		EnumInfos:         file_api_gozagel_proto_enumTypes,
		MessageInfos:      file_api_gozagel_proto_msgTypes,
	}.Build()
	File_api_gozagel_proto = out.File
	file_api_gozagel_proto_rawDesc = nil
	file_api_gozagel_proto_goTypes = nil
	file_api_gozagel_proto_depIdxs = nil
}
