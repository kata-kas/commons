// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/gozagel.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthService_Login_FullMethodName    = "/api.AuthService/Login"
	AuthService_Register_FullMethodName = "/api.AuthService/Register"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *User) (*AuthResponse, error)
	Register(context.Context, *User) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *User) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *User) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gozagel.proto",
}

const (
	QuoteRequestsService_RequestQuotes_FullMethodName = "/api.QuoteRequestsService/RequestQuotes"
	QuoteRequestsService_GetQuotes_FullMethodName     = "/api.QuoteRequestsService/GetQuotes"
)

// QuoteRequestsServiceClient is the client API for QuoteRequestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteRequestsServiceClient interface {
	RequestQuotes(ctx context.Context, in *QuoteRequestsBody, opts ...grpc.CallOption) (*QuoteRequestsResponse, error)
	GetQuotes(ctx context.Context, in *QuoteRequestsResponse, opts ...grpc.CallOption) (*QuotesResponse, error)
}

type quoteRequestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteRequestsServiceClient(cc grpc.ClientConnInterface) QuoteRequestsServiceClient {
	return &quoteRequestsServiceClient{cc}
}

func (c *quoteRequestsServiceClient) RequestQuotes(ctx context.Context, in *QuoteRequestsBody, opts ...grpc.CallOption) (*QuoteRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuoteRequestsResponse)
	err := c.cc.Invoke(ctx, QuoteRequestsService_RequestQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRequestsServiceClient) GetQuotes(ctx context.Context, in *QuoteRequestsResponse, opts ...grpc.CallOption) (*QuotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotesResponse)
	err := c.cc.Invoke(ctx, QuoteRequestsService_GetQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteRequestsServiceServer is the server API for QuoteRequestsService service.
// All implementations must embed UnimplementedQuoteRequestsServiceServer
// for forward compatibility
type QuoteRequestsServiceServer interface {
	RequestQuotes(context.Context, *QuoteRequestsBody) (*QuoteRequestsResponse, error)
	GetQuotes(context.Context, *QuoteRequestsResponse) (*QuotesResponse, error)
	mustEmbedUnimplementedQuoteRequestsServiceServer()
}

// UnimplementedQuoteRequestsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteRequestsServiceServer struct {
}

func (UnimplementedQuoteRequestsServiceServer) RequestQuotes(context.Context, *QuoteRequestsBody) (*QuoteRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestQuotes not implemented")
}
func (UnimplementedQuoteRequestsServiceServer) GetQuotes(context.Context, *QuoteRequestsResponse) (*QuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}
func (UnimplementedQuoteRequestsServiceServer) mustEmbedUnimplementedQuoteRequestsServiceServer() {}

// UnsafeQuoteRequestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteRequestsServiceServer will
// result in compilation errors.
type UnsafeQuoteRequestsServiceServer interface {
	mustEmbedUnimplementedQuoteRequestsServiceServer()
}

func RegisterQuoteRequestsServiceServer(s grpc.ServiceRegistrar, srv QuoteRequestsServiceServer) {
	s.RegisterService(&QuoteRequestsService_ServiceDesc, srv)
}

func _QuoteRequestsService_RequestQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequestsBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteRequestsServiceServer).RequestQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteRequestsService_RequestQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteRequestsServiceServer).RequestQuotes(ctx, req.(*QuoteRequestsBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteRequestsService_GetQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequestsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteRequestsServiceServer).GetQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteRequestsService_GetQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteRequestsServiceServer).GetQuotes(ctx, req.(*QuoteRequestsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteRequestsService_ServiceDesc is the grpc.ServiceDesc for QuoteRequestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteRequestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.QuoteRequestsService",
	HandlerType: (*QuoteRequestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestQuotes",
			Handler:    _QuoteRequestsService_RequestQuotes_Handler,
		},
		{
			MethodName: "GetQuotes",
			Handler:    _QuoteRequestsService_GetQuotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gozagel.proto",
}
